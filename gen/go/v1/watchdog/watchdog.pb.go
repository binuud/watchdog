/// Please use the following editor setup for this file:

// Tab size=2; Tabs as spaces; Clean up trailing whitepsace
// 'make proto' will run clang-format to fix formatiing

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.5
// 	protoc        v5.29.3
// source: v1/watchdog/watchdog.proto

package watchdog

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CertificateStatus_EnumCertStatus int32

const (
	CertificateStatus_EnumCertStatusIgnore CertificateStatus_EnumCertStatus = 0
	CertificateStatus_Valid                CertificateStatus_EnumCertStatus = 1
	CertificateStatus_Expiring             CertificateStatus_EnumCertStatus = 2
	// when certificate is for a different domain
	CertificateStatus_WrongCertificate CertificateStatus_EnumCertStatus = 3
)

// Enum value maps for CertificateStatus_EnumCertStatus.
var (
	CertificateStatus_EnumCertStatus_name = map[int32]string{
		0: "EnumCertStatusIgnore",
		1: "Valid",
		2: "Expiring",
		3: "WrongCertificate",
	}
	CertificateStatus_EnumCertStatus_value = map[string]int32{
		"EnumCertStatusIgnore": 0,
		"Valid":                1,
		"Expiring":             2,
		"WrongCertificate":     3,
	}
)

func (x CertificateStatus_EnumCertStatus) Enum() *CertificateStatus_EnumCertStatus {
	p := new(CertificateStatus_EnumCertStatus)
	*p = x
	return p
}

func (x CertificateStatus_EnumCertStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertificateStatus_EnumCertStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_v1_watchdog_watchdog_proto_enumTypes[0].Descriptor()
}

func (CertificateStatus_EnumCertStatus) Type() protoreflect.EnumType {
	return &file_v1_watchdog_watchdog_proto_enumTypes[0]
}

func (x CertificateStatus_EnumCertStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertificateStatus_EnumCertStatus.Descriptor instead.
func (CertificateStatus_EnumCertStatus) EnumDescriptor() ([]byte, []int) {
	return file_v1_watchdog_watchdog_proto_rawDescGZIP(), []int{3, 0}
}

type DomainItem struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Uuid          string                 `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	Name          string                 `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Endpoints     []string               `protobuf:"bytes,3,rep,name=endpoints,proto3" json:"endpoints,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DomainItem) Reset() {
	*x = DomainItem{}
	mi := &file_v1_watchdog_watchdog_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainItem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainItem) ProtoMessage() {}

func (x *DomainItem) ProtoReflect() protoreflect.Message {
	mi := &file_v1_watchdog_watchdog_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainItem.ProtoReflect.Descriptor instead.
func (*DomainItem) Descriptor() ([]byte, []int) {
	return file_v1_watchdog_watchdog_proto_rawDescGZIP(), []int{0}
}

func (x *DomainItem) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *DomainItem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainItem) GetEndpoints() []string {
	if x != nil {
		return x.Endpoints
	}
	return nil
}

type DomainWatch struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// for display purpose
	// in future we can have multiple watch lists
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// interval in seconds
	RefreshInterval int64         `protobuf:"varint,2,opt,name=refreshInterval,proto3" json:"refreshInterval,omitempty"`
	Domains         []*DomainItem `protobuf:"bytes,11,rep,name=domains,proto3" json:"domains,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DomainWatch) Reset() {
	*x = DomainWatch{}
	mi := &file_v1_watchdog_watchdog_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainWatch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainWatch) ProtoMessage() {}

func (x *DomainWatch) ProtoReflect() protoreflect.Message {
	mi := &file_v1_watchdog_watchdog_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainWatch.ProtoReflect.Descriptor instead.
func (*DomainWatch) Descriptor() ([]byte, []int) {
	return file_v1_watchdog_watchdog_proto_rawDescGZIP(), []int{1}
}

func (x *DomainWatch) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *DomainWatch) GetRefreshInterval() int64 {
	if x != nil {
		return x.RefreshInterval
	}
	return 0
}

func (x *DomainWatch) GetDomains() []*DomainItem {
	if x != nil {
		return x.Domains
	}
	return nil
}

type EndpointStatus struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Endpoint      string                 `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	StatusCode    int64                  `protobuf:"varint,3,opt,name=statusCode,proto3" json:"statusCode,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *EndpointStatus) Reset() {
	*x = EndpointStatus{}
	mi := &file_v1_watchdog_watchdog_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *EndpointStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EndpointStatus) ProtoMessage() {}

func (x *EndpointStatus) ProtoReflect() protoreflect.Message {
	mi := &file_v1_watchdog_watchdog_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EndpointStatus.ProtoReflect.Descriptor instead.
func (*EndpointStatus) Descriptor() ([]byte, []int) {
	return file_v1_watchdog_watchdog_proto_rawDescGZIP(), []int{2}
}

func (x *EndpointStatus) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *EndpointStatus) GetStatusCode() int64 {
	if x != nil {
		return x.StatusCode
	}
	return 0
}

type CertificateStatus struct {
	state     protoimpl.MessageState           `protogen:"open.v1"`
	Status    CertificateStatus_EnumCertStatus `protobuf:"varint,1,opt,name=status,proto3,enum=watchdog.CertificateStatus_EnumCertStatus" json:"status,omitempty"`
	CertValid bool                             `protobuf:"varint,2,opt,name=certValid,proto3" json:"certValid,omitempty"`
	// time in seconds when the certificates expire
	CertExpiry    int64 `protobuf:"varint,3,opt,name=certExpiry,proto3" json:"certExpiry,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CertificateStatus) Reset() {
	*x = CertificateStatus{}
	mi := &file_v1_watchdog_watchdog_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CertificateStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertificateStatus) ProtoMessage() {}

func (x *CertificateStatus) ProtoReflect() protoreflect.Message {
	mi := &file_v1_watchdog_watchdog_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertificateStatus.ProtoReflect.Descriptor instead.
func (*CertificateStatus) Descriptor() ([]byte, []int) {
	return file_v1_watchdog_watchdog_proto_rawDescGZIP(), []int{3}
}

func (x *CertificateStatus) GetStatus() CertificateStatus_EnumCertStatus {
	if x != nil {
		return x.Status
	}
	return CertificateStatus_EnumCertStatusIgnore
}

func (x *CertificateStatus) GetCertValid() bool {
	if x != nil {
		return x.CertValid
	}
	return false
}

func (x *CertificateStatus) GetCertExpiry() int64 {
	if x != nil {
		return x.CertExpiry
	}
	return 0
}

// summary message, which can be used to display summary
// of domain items on Cli or any UI
type DomainSummary struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// domainItem is duplicated here
	// for easier summarization api
	// and client can just get the summary data from a single call
	Domain *DomainItem `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	// is the root url reachable
	Reachable bool `protobuf:"varint,2,opt,name=reachable,proto3" json:"reachable,omitempty"`
	// does the domain name resolv to an ip
	Resolvable   bool                 `protobuf:"varint,3,opt,name=resolvable,proto3" json:"resolvable,omitempty"`
	CertsStatus  []*CertificateStatus `protobuf:"bytes,4,rep,name=certsStatus,proto3" json:"certsStatus,omitempty"`
	WhoIsMutated bool                 `protobuf:"varint,6,opt,name=whoIsMutated,proto3" json:"whoIsMutated,omitempty"`
	// when was whois data modified
	WhoIsMutatedAt int64                  `protobuf:"varint,7,opt,name=whoIsMutatedAt,proto3" json:"whoIsMutatedAt,omitempty"`
	CreatedAt      *timestamppb.Timestamp `protobuf:"bytes,8,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	// we expect http requests to be redirected to https
	HttpsRedirect bool `protobuf:"varint,11,opt,name=httpsRedirect,proto3" json:"httpsRedirect,omitempty"`
	// total number of endpoints configured by the user
	NumEndpoints int64 `protobuf:"varint,21,opt,name=numEndpoints,proto3" json:"numEndpoints,omitempty"`
	// number of endpoints with a success HTTP response code
	ValidEndpoints int64 `protobuf:"varint,22,opt,name=validEndpoints,proto3" json:"validEndpoints,omitempty"`
	// number of resolvable ip
	NumIp int64 `protobuf:"varint,23,opt,name=numIp,proto3" json:"numIp,omitempty"`
	// number of certs associated with domain
	NumCerts         int64 `protobuf:"varint,24,opt,name=numCerts,proto3" json:"numCerts,omitempty"`
	NumValidCerts    int64 `protobuf:"varint,25,opt,name=numValidCerts,proto3" json:"numValidCerts,omitempty"`
	NumExpiringCerts int64 `protobuf:"varint,26,opt,name=numExpiringCerts,proto3" json:"numExpiringCerts,omitempty"`
	// number of who is updates in last one month
	NumWhoIsUpdates int64 `protobuf:"varint,27,opt,name=numWhoIsUpdates,proto3" json:"numWhoIsUpdates,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *DomainSummary) Reset() {
	*x = DomainSummary{}
	mi := &file_v1_watchdog_watchdog_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainSummary) ProtoMessage() {}

func (x *DomainSummary) ProtoReflect() protoreflect.Message {
	mi := &file_v1_watchdog_watchdog_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainSummary.ProtoReflect.Descriptor instead.
func (*DomainSummary) Descriptor() ([]byte, []int) {
	return file_v1_watchdog_watchdog_proto_rawDescGZIP(), []int{4}
}

func (x *DomainSummary) GetDomain() *DomainItem {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *DomainSummary) GetReachable() bool {
	if x != nil {
		return x.Reachable
	}
	return false
}

func (x *DomainSummary) GetResolvable() bool {
	if x != nil {
		return x.Resolvable
	}
	return false
}

func (x *DomainSummary) GetCertsStatus() []*CertificateStatus {
	if x != nil {
		return x.CertsStatus
	}
	return nil
}

func (x *DomainSummary) GetWhoIsMutated() bool {
	if x != nil {
		return x.WhoIsMutated
	}
	return false
}

func (x *DomainSummary) GetWhoIsMutatedAt() int64 {
	if x != nil {
		return x.WhoIsMutatedAt
	}
	return 0
}

func (x *DomainSummary) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *DomainSummary) GetHttpsRedirect() bool {
	if x != nil {
		return x.HttpsRedirect
	}
	return false
}

func (x *DomainSummary) GetNumEndpoints() int64 {
	if x != nil {
		return x.NumEndpoints
	}
	return 0
}

func (x *DomainSummary) GetValidEndpoints() int64 {
	if x != nil {
		return x.ValidEndpoints
	}
	return 0
}

func (x *DomainSummary) GetNumIp() int64 {
	if x != nil {
		return x.NumIp
	}
	return 0
}

func (x *DomainSummary) GetNumCerts() int64 {
	if x != nil {
		return x.NumCerts
	}
	return 0
}

func (x *DomainSummary) GetNumValidCerts() int64 {
	if x != nil {
		return x.NumValidCerts
	}
	return 0
}

func (x *DomainSummary) GetNumExpiringCerts() int64 {
	if x != nil {
		return x.NumExpiringCerts
	}
	return 0
}

func (x *DomainSummary) GetNumWhoIsUpdates() int64 {
	if x != nil {
		return x.NumWhoIsUpdates
	}
	return 0
}

// decsriptive information about the domains
type DomainInfo struct {
	state       protoimpl.MessageState `protogen:"open.v1"`
	IpAddresses []string               `protobuf:"bytes,1,rep,name=ipAddresses,proto3" json:"ipAddresses,omitempty"`
	// any field is not supported when created openApi swagger file
	Certificates     [][]byte               `protobuf:"bytes,2,rep,name=certificates,proto3" json:"certificates,omitempty"`
	EndpointStatuses []*EndpointStatus      `protobuf:"bytes,3,rep,name=endpointStatuses,proto3" json:"endpointStatuses,omitempty"`
	Whois            string                 `protobuf:"bytes,6,opt,name=whois,proto3" json:"whois,omitempty"`
	CreatedAt        *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	unknownFields    protoimpl.UnknownFields
	sizeCache        protoimpl.SizeCache
}

func (x *DomainInfo) Reset() {
	*x = DomainInfo{}
	mi := &file_v1_watchdog_watchdog_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainInfo) ProtoMessage() {}

func (x *DomainInfo) ProtoReflect() protoreflect.Message {
	mi := &file_v1_watchdog_watchdog_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainInfo.ProtoReflect.Descriptor instead.
func (*DomainInfo) Descriptor() ([]byte, []int) {
	return file_v1_watchdog_watchdog_proto_rawDescGZIP(), []int{5}
}

func (x *DomainInfo) GetIpAddresses() []string {
	if x != nil {
		return x.IpAddresses
	}
	return nil
}

func (x *DomainInfo) GetCertificates() [][]byte {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *DomainInfo) GetEndpointStatuses() []*EndpointStatus {
	if x != nil {
		return x.EndpointStatuses
	}
	return nil
}

func (x *DomainInfo) GetWhois() string {
	if x != nil {
		return x.Whois
	}
	return ""
}

func (x *DomainInfo) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

// used for persisting domain information
type DomainRow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Domain        *DomainItem            `protobuf:"bytes,1,opt,name=domain,proto3" json:"domain,omitempty"`
	Info          *DomainInfo            `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Summary       *DomainSummary         `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty"`
	CreatedAt     *timestamppb.Timestamp `protobuf:"bytes,11,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *DomainRow) Reset() {
	*x = DomainRow{}
	mi := &file_v1_watchdog_watchdog_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DomainRow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DomainRow) ProtoMessage() {}

func (x *DomainRow) ProtoReflect() protoreflect.Message {
	mi := &file_v1_watchdog_watchdog_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DomainRow.ProtoReflect.Descriptor instead.
func (*DomainRow) Descriptor() ([]byte, []int) {
	return file_v1_watchdog_watchdog_proto_rawDescGZIP(), []int{6}
}

func (x *DomainRow) GetDomain() *DomainItem {
	if x != nil {
		return x.Domain
	}
	return nil
}

func (x *DomainRow) GetInfo() *DomainInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

func (x *DomainRow) GetSummary() *DomainSummary {
	if x != nil {
		return x.Summary
	}
	return nil
}

func (x *DomainRow) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

var File_v1_watchdog_watchdog_proto protoreflect.FileDescriptor

var file_v1_watchdog_watchdog_proto_rawDesc = string([]byte{
	0x0a, 0x1a, 0x76, 0x31, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x52, 0x0a, 0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69,
	0x6e, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x09, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x7b, 0x0a, 0x0b, 0x44,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x72, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x2e, 0x0a, 0x07, 0x64, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x61, 0x74, 0x63,
	0x68, 0x64, 0x6f, 0x67, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52,
	0x07, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x73, 0x22, 0x4c, 0x0a, 0x0e, 0x45, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e,
	0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x43, 0x6f, 0x64, 0x65, 0x22, 0xf0, 0x01, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69,
	0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x42, 0x0a, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x65,
	0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x1c, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x63, 0x65, 0x72, 0x74, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x63, 0x65, 0x72, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x79, 0x22, 0x59,
	0x0a, 0x0e, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x18, 0x0a, 0x14, 0x45, 0x6e, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x49, 0x67, 0x6e, 0x6f, 0x72, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x69, 0x64, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x10, 0x03, 0x22, 0xe0, 0x04, 0x0a, 0x0d, 0x44, 0x6f,
	0x6d, 0x61, 0x69, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x2c, 0x0a, 0x06, 0x64,
	0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x74, 0x65,
	0x6d, 0x52, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x61,
	0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x72, 0x65,
	0x61, 0x63, 0x68, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x77,
	0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x73,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x77, 0x68, 0x6f, 0x49, 0x73, 0x4d,
	0x75, 0x74, 0x61, 0x74, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x68,
	0x6f, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x77, 0x68,
	0x6f, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0e, 0x77, 0x68, 0x6f, 0x49, 0x73, 0x4d, 0x75, 0x74, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x24, 0x0a, 0x0d,
	0x68, 0x74, 0x74, 0x70, 0x73, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x68, 0x74, 0x74, 0x70, 0x73, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x6e, 0x75, 0x6d, 0x45, 0x6e, 0x64,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x45,
	0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x16, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x14,
	0x0a, 0x05, 0x6e, 0x75, 0x6d, 0x49, 0x70, 0x18, 0x17, 0x20, 0x01, 0x28, 0x03, 0x52, 0x05, 0x6e,
	0x75, 0x6d, 0x49, 0x70, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x73,
	0x18, 0x18, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x6e, 0x75, 0x6d, 0x43, 0x65, 0x72, 0x74, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x43, 0x65, 0x72, 0x74,
	0x73, 0x18, 0x19, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x6e, 0x75, 0x6d, 0x56, 0x61, 0x6c, 0x69,
	0x64, 0x43, 0x65, 0x72, 0x74, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x10, 0x6e, 0x75, 0x6d, 0x45, 0x78, 0x70, 0x69, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x65, 0x72,
	0x74, 0x73, 0x12, 0x28, 0x0a, 0x0f, 0x6e, 0x75, 0x6d, 0x57, 0x68, 0x6f, 0x49, 0x73, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x73, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x6e, 0x75, 0x6d,
	0x57, 0x68, 0x6f, 0x49, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x73, 0x22, 0xe8, 0x01, 0x0a,
	0x0a, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0c, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x73, 0x12, 0x44, 0x0a, 0x10, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x77, 0x61,
	0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x45, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x10, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x65, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x77, 0x68, 0x6f, 0x69, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x77, 0x68, 0x6f, 0x69, 0x73, 0x12, 0x38, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22, 0xd0, 0x01, 0x0a, 0x09, 0x44, 0x6f, 0x6d, 0x61,
	0x69, 0x6e, 0x52, 0x6f, 0x77, 0x12, 0x2c, 0x0a, 0x06, 0x64, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67,
	0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x06, 0x64, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x28, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x44, 0x6f, 0x6d,
	0x61, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x31, 0x0a,
	0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x07, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x12, 0x38, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x42, 0x2f, 0x5a, 0x2d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x62, 0x69, 0x6e, 0x75, 0x75, 0x64, 0x2f,
	0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x67, 0x6f, 0x2f,
	0x76, 0x31, 0x2f, 0x77, 0x61, 0x74, 0x63, 0x68, 0x64, 0x6f, 0x67, 0x62, 0x06, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x33,
})

var (
	file_v1_watchdog_watchdog_proto_rawDescOnce sync.Once
	file_v1_watchdog_watchdog_proto_rawDescData []byte
)

func file_v1_watchdog_watchdog_proto_rawDescGZIP() []byte {
	file_v1_watchdog_watchdog_proto_rawDescOnce.Do(func() {
		file_v1_watchdog_watchdog_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_v1_watchdog_watchdog_proto_rawDesc), len(file_v1_watchdog_watchdog_proto_rawDesc)))
	})
	return file_v1_watchdog_watchdog_proto_rawDescData
}

var file_v1_watchdog_watchdog_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_v1_watchdog_watchdog_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_v1_watchdog_watchdog_proto_goTypes = []any{
	(CertificateStatus_EnumCertStatus)(0), // 0: watchdog.CertificateStatus.EnumCertStatus
	(*DomainItem)(nil),                    // 1: watchdog.DomainItem
	(*DomainWatch)(nil),                   // 2: watchdog.DomainWatch
	(*EndpointStatus)(nil),                // 3: watchdog.EndpointStatus
	(*CertificateStatus)(nil),             // 4: watchdog.CertificateStatus
	(*DomainSummary)(nil),                 // 5: watchdog.DomainSummary
	(*DomainInfo)(nil),                    // 6: watchdog.DomainInfo
	(*DomainRow)(nil),                     // 7: watchdog.DomainRow
	(*timestamppb.Timestamp)(nil),         // 8: google.protobuf.Timestamp
}
var file_v1_watchdog_watchdog_proto_depIdxs = []int32{
	1,  // 0: watchdog.DomainWatch.domains:type_name -> watchdog.DomainItem
	0,  // 1: watchdog.CertificateStatus.status:type_name -> watchdog.CertificateStatus.EnumCertStatus
	1,  // 2: watchdog.DomainSummary.domain:type_name -> watchdog.DomainItem
	4,  // 3: watchdog.DomainSummary.certsStatus:type_name -> watchdog.CertificateStatus
	8,  // 4: watchdog.DomainSummary.createdAt:type_name -> google.protobuf.Timestamp
	3,  // 5: watchdog.DomainInfo.endpointStatuses:type_name -> watchdog.EndpointStatus
	8,  // 6: watchdog.DomainInfo.createdAt:type_name -> google.protobuf.Timestamp
	1,  // 7: watchdog.DomainRow.domain:type_name -> watchdog.DomainItem
	6,  // 8: watchdog.DomainRow.info:type_name -> watchdog.DomainInfo
	5,  // 9: watchdog.DomainRow.summary:type_name -> watchdog.DomainSummary
	8,  // 10: watchdog.DomainRow.createdAt:type_name -> google.protobuf.Timestamp
	11, // [11:11] is the sub-list for method output_type
	11, // [11:11] is the sub-list for method input_type
	11, // [11:11] is the sub-list for extension type_name
	11, // [11:11] is the sub-list for extension extendee
	0,  // [0:11] is the sub-list for field type_name
}

func init() { file_v1_watchdog_watchdog_proto_init() }
func file_v1_watchdog_watchdog_proto_init() {
	if File_v1_watchdog_watchdog_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_v1_watchdog_watchdog_proto_rawDesc), len(file_v1_watchdog_watchdog_proto_rawDesc)),
			NumEnums:      1,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_v1_watchdog_watchdog_proto_goTypes,
		DependencyIndexes: file_v1_watchdog_watchdog_proto_depIdxs,
		EnumInfos:         file_v1_watchdog_watchdog_proto_enumTypes,
		MessageInfos:      file_v1_watchdog_watchdog_proto_msgTypes,
	}.Build()
	File_v1_watchdog_watchdog_proto = out.File
	file_v1_watchdog_watchdog_proto_goTypes = nil
	file_v1_watchdog_watchdog_proto_depIdxs = nil
}
